---
description: 
globs: 
alwaysApply: true
---
# 顺口成章小程序规范文件使用指南

## 一、规范文件概览

### 1. project-rules.mdc（项目开发规范）
- 使用范围：项目整体开发过程
- 适用对象：所有开发人员
- 主要内容：
  - 项目结构规范
  - 命名规范
  - 数据存储规范
  - 编码规范
  - 性能规范
  - 安全规范
- 使用时机：
  - 项目初始化时
  - 新成员加入时（首周必读）
  - 开发新功能时（评审前回顾）
  - 代码审查时（每次PR前检查）
- 回顾频率：每月至少一次完整回顾

### 2. global-code-rules.mdc（全局代码规范）
- 使用范围：具体编码实践
- 适用对象：开发人员、代码审查者
- 主要内容：
  - 代码组织规范
  - 环境管理规范
  - 代码质量控制
  - 代码修改规范
  - 版本控制规范
  - 文档维护规范
- 使用时机：
  - 日常编码过程中（每次开发前回顾相关章节）
  - 代码重构时（必查）
  - 代码审查时（PR检查清单首位）
  - 文档编写时
- 回顾频率：每两周至少一次完整回顾

### 3. ad-rules.mdc（广告服务规范）
- 使用范围：广告相关功能开发
- 适用对象：负责广告功能的开发人员
- 主要内容：
  - 广告服务架构
  - 广告接口预留
  - 广告触发规则
  - 未来接入规范
- 使用时机：
  - 开发广告相关功能时（每次必查）
  - 广告服务升级时（完整回顾）
  - 广告配置调整时（检查兼容性）
- 回顾频率：涉及广告开发时每次查阅

### 4. speech-rules.mdc（语音服务规范）
- 使用范围：语音相关功能开发
- 适用对象：负责语音功能的开发人员
- 主要内容：
  - 语音服务架构
  - 录音规范
  - 语音合成规范
  - 错误处理规范
- 使用时机：
  - 开发语音相关功能时（每次必查）
  - 语音服务优化时（完整回顾）
  - 处理语音相关问题时（错误处理章节必查）
- 回顾频率：涉及语音开发时每次查阅

### 5. user-flow-rules.mdc（用户流程规范）
- 使用范围：功能开发和交互设计
- 适用对象：所有开发和设计人员
- 主要内容：
  - 用户使用流程
  - 交互设计规范
  - 异常处理方式
  - 用户体验要求
- 使用时机：
  - 新功能设计时（必读）
  - 交互方案评审时（对照检查）
  - 功能测试时（验证流程）
  - 体验优化时（参考依据）
- 回顾频率：功能开发和优化时必查

## 二、规范文件使用优先级

1. 规范冲突处理优先级（从高到低）：
   - global-code-rules.mdc（全局代码规范）
   - project-rules.mdc（项目开发规范）
   - user-flow-rules.mdc（用户流程规范）
   - 功能规范（ad-rules.mdc、speech-rules.mdc）

2. 基础规范（必读）：
   - project-rules.mdc（入职首周必读，每月回顾）
   - global-code-rules.mdc（每两周回顾）

3. 功能规范（按需参考）：
   - ad-rules.mdc（广告开发必查）
   - speech-rules.mdc（语音开发必查）

## 三、规范引用场景

1. 新功能立项
   - 评审前：project-rules.mdc（架构相关章节）
   - 设计时：user-flow-rules.mdc（流程相关章节）
   - 开发时：global-code-rules.mdc（代码组织章节）
   - 实现前：相关功能规范

2. 代码重构
   - 决策前：global-code-rules.mdc（完整回顾）
   - 方案设计：project-rules.mdc（架构章节）
   - 实现中：相关功能规范

3. Bug修复
   - 排查前：相关功能规范（错误处理章节）
   - 修复时：global-code-rules.mdc（代码质量章节）
   - 提交前：project-rules.mdc（测试规范）

4. 性能优化
   - 分析前：project-rules.mdc（性能规范章节）
   - 优化时：global-code-rules.mdc（性能相关章节）
   - 验证时：相关功能规范（性能指标）

## 四、规范文件维护

1. 定期更新
   - 每季度审查一次规范内容
   - 根据项目发展及时补充
   - 移除过时的规范要求

2. 版本控制
   - 记录规范修改历史
   - 标注规范版本号
   - 说明重要变更点

3. 团队同步
   - 规范更新及时通知团队
   - 重要变更召开说明会
   - 收集团队反馈并优化

## 五、最佳实践建议

1. 新人入职（首周）
   - 第1天：通读project-rules.mdc
   - 第2-3天：学习global-code-rules.mdc
   - 第4-5天：根据分工学习功能规范

2. 日常开发
   - 开发前：检查相关规范更新
   - 编码时：对照规范实现
   - 提交前：进行规范自查

3. 代码审查
   - 使用规范作为检查清单
   - 标注违反的具体规范条目
   - 提供规范链接作为参考

4. 文档编写
   - 遵循统一的文档格式
   - 确保与现有规范一致
   - 及时更新相关规范 
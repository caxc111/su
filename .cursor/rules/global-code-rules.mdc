---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# 顺口成章小程序全局代码规范

## 一、基本原则

### 1. 简单性优先
- 始终优先选择简单、清晰的实现方案
- 避免过度设计和不必要的抽象
- 在保持代码可维护性的前提下追求简洁

### 2. 代码复用
- 修改代码前，检查代码库中是否已存在相似功能
- 将常用功能封装为工具函数或组件
- 建立和维护组件/工具函数文档
- 定期review和重构重复代码

### 3. 一致性
- 遵循项目既定的代码风格和架构设计
- 保持命名规范的一致性
- 相似功能采用相似的实现方式
- 使用统一的错误处理和日志记录方式

## 二、环境管理

### 1. 环境区分
- 开发环境(dev)：本地开发使用
- 测试环境(test)：用于测试和验证
- 生产环境(prod)：线上运行环境

### 2. 环境配置
- 使用.env文件管理环境变量
- 禁止直接修改.env文件，需通过配置中心或团队确认
- 各环境配置文件应包含明确的注释说明
- 敏感信息（如密钥）不得硬编码在代码中

### 3. 数据规范
- 开发环境可使用模拟数据进行开发
- 测试环境使用专门的测试数据集
- 生产环境严禁使用任何模拟数据
- 必须做好数据隔离，避免环境间数据污染

## 三、代码质量控制

### 1. 代码组织
- 单个文件建议不超过500行代码，最大不超过800行
  - 页面文件(.js/.ts)：建议500行以内，最大800行
  - 组件文件：建议400行以内，最大600行
  - 工具类文件：建议300行以内，最大500行
  - 配置文件：建议200行以内，最大300行
  - 超出建议行数时考虑拆分文件
  - 特殊情况（如复杂页面）可适当放宽限制，但必须有充分理由和注释说明
- 单个函数不超过50行代码
- 单个函数参数不超过5个
- 代码嵌套层级不超过4层

### 2. 命名规范
- 变量名：使用有意义的描述性名称
- 函数名：动词+名词组合
- 组件名：大驼峰命名
- 常量名：全大写下划线分隔
- 私有属性：下划线开头

### 3. 注释规范
- 公共接口必须包含JSDoc注释
- 复杂逻辑必须添加注释说明
- 临时代码必须注明TODO和处理期限
- 废弃代码及时删除，不要注释保留

## 四、代码修改规范

### 1. 修改原则
- 仅针对明确的需求进行修改
- 确保充分理解需求和现有代码
- 评估修改的影响范围
- 保持向下兼容性

### 2. 重构原则
- 功能修改与重构分开进行
- 重构前编写完整的单元测试
- 重构时保持功能不变
- 分步进行，每步验证

### 3. 脚本管理
- 避免在业务代码中编写一次性脚本
- 数据迁移脚本放在专门的目录
- 脚本必须包含详细的注释说明
- 保留脚本执行记录和结果

## 五、安全规范

### 1. 数据安全
- 敏感数据必须加密存储
- 传输数据使用HTTPS
- 定期清理临时数据
- 做好数据备份

### 2. 代码安全
- 防止XSS攻击
- 防止SQL注入
- 防止CSRF攻击
- 避免敏感信息泄露

### 3. 权限控制
- 最小权限原则
- 角色权限分离
- 关键操作需要二次确认
- 记录重要操作日志

## 六、性能规范

### 1. 代码性能
- 避免不必要的循环和判断
- 减少DOM操作
- 及时释放不需要的资源
- 使用节流和防抖

### 2. 资源优化
- 图片资源压缩
- 及时清理无用资源
- 合理使用缓存
- 控制包体积大小

### 3. 加载优化
- 按需加载
- 预加载关键资源
- 合理使用分包
- 优化首屏加载

## 七、版本控制

### 1. 分支管理
- 遵循Git Flow工作流
- 功能开发使用feature分支
- 版本发布使用release分支
- 紧急修复使用hotfix分支

### 2. 提交规范
- 遵循约定式提交规范
- 每次提交专注于单一改动
- 提交信息清晰明确
- 及时处理冲突

### 3. 版本发布
- 遵循语义化版本规范
- 维护更新日志
- 做好版本回滚准备
- 灰度发布重要更新

## 八、文档维护

### 1. 文档类型
- README.md项目说明
- API文档
- 组件文档
- 部署文档

### 2. 文档要求
- 及时更新
- 结构清晰
- 示例完整
- 版本对应

### 3. 文档规范
- 使用Markdown格式
- 包含更新时间
- 标注适用版本
- 提供联系方式 